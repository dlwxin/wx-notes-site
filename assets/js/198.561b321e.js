(window.webpackJsonp=window.webpackJsonp||[]).push([[198],{661:function(e,t,a){"use strict";a.r(t);var s=a(18),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"ds-spec-字段说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ds-spec-字段说明"}},[e._v("#")]),e._v(" "),a("code",[e._v("ds.spec")]),e._v(" 字段说明")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("字段")]),e._v(" "),a("th",[e._v("类型")]),e._v(" "),a("th",[e._v("说明")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("minReadySeconds")]),e._v(" "),a("td",[a("code",[e._v("<integer>")])]),e._v(" "),a("td",[e._v("新创建的 DaemonSet pod 在容器不崩溃的情况下准备就绪的最小秒数，这样才能认为它可用。默认值为 0 (pod 准备好 后即被认为可用)")])]),e._v(" "),a("tr",[a("td",[e._v("revisionHistoryLimit")]),e._v(" "),a("td",[a("code",[e._v("<integer>")])]),e._v(" "),a("td",[e._v("要保留以允许回滚的旧历史记录数。默认为 10。")])]),e._v(" "),a("tr",[a("td",[e._v("selector")]),e._v(" "),a("td",[a("code",[e._v("<Object>")]),a("br"),e._v(" -required-")]),e._v(" "),a("td",[e._v("通过 DaemonSet 管理的容器上的标签查询。 必须匹配才能被控制。 它必须与 Pod 模板的标签匹配。")])]),e._v(" "),a("tr",[a("td",[e._v("template")]),e._v(" "),a("td",[a("code",[e._v("<Object>")]),a("br"),e._v(" -required-")]),e._v(" "),a("td",[e._v("描述将要创建的 pod 的对象。DaemonSet 将在与模板的节点选择器相匹配的每个节点上(或者在没有指定节点选择器的 每个节点上)创建这个 pod 的一个副本。")])]),e._v(" "),a("tr",[a("td",[e._v("updateStrategy")]),e._v(" "),a("td",[a("code",[e._v("<Object>")])]),e._v(" "),a("td",[e._v("更新策略，用新的 Pod 替换现有的 DaemonSet Pod。")])])])]),e._v(" "),a("h2",{attrs:{id:"ds-spec-updatestrategy-部署策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ds-spec-updatestrategy-部署策略"}},[e._v("#")]),e._v(" "),a("code",[e._v("ds.spec.updateStrategy")]),e._v(" 部署策略")]),e._v(" "),a("table",[a("thead",[a("tr",[a("th",[e._v("字段")]),e._v(" "),a("th",[e._v("说明")])])]),e._v(" "),a("tbody",[a("tr",[a("td",[e._v("OnDelete")]),e._v(" "),a("td",[e._v("当删除该 node 节点上的 ds pod 后，才进行更新(创建新版本的 pod)")])]),e._v(" "),a("tr",[a("td",[e._v("RollingUpdate")]),e._v(" "),a("td",[e._v("默认策略滚动更新。一个 node 节点上的 ds pod 更新后等待 minReadySeconds 秒后，更新下一个 node 节点的 ds pod。 maxUnavailable 默认为 1，即一个节点一个节点进行更新。")])])])]),e._v(" "),a("h2",{attrs:{id:"deployment-控制器和-daemonset-控制器比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deployment-控制器和-daemonset-控制器比较"}},[e._v("#")]),e._v(" Deployment 控制器和 DaemonSet 控制器比较")]),e._v(" "),a("h3",{attrs:{id:"说明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说明"}},[e._v("#")]),e._v(" 说明")]),e._v(" "),a("p",[e._v("Deployment 为 Pod 和 ReplicaSet 提供声明式更新。只需 要在 Deployment 中描述想要的目标状态是什么，Deployment controller 就会帮您将 Pod 和 ReplicaSet 的实际状态改变 到您的目标状态。也可以定义一个全新的 Deployment 来创建 ReplicaSet 或者删除已有的 Deployment 并创建一个新的来 替换。")]),e._v(" "),a("p",[e._v("DaemonSet 控制器用于在集群中的全部（或者某些）节点上同时运行一 个指定的 Pod 资源副本，后续新加入集群的工作节点也会自动创建一个相同 的 Pod 对象，当从集群移除节点时，此类 Pod 对象也将被自动回收而无需重 建。删除 DaemonSet 将会删除它创建的所有 Pod。管理员也可以使用 nodeSelector(节点选择器)及节点 label(标签)指定仅在部分具有特定特 征的节点上运行指定的 Pod 对象。")]),e._v(" "),a("h3",{attrs:{id:"stateless"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stateless"}},[e._v("#")]),e._v(" Stateless")]),e._v(" "),a("p",[e._v("这点 Deployment 控制器和 DaemonSet 控制器是一样的")]),e._v(" "),a("p",[e._v("所有 pod 只需要共享一个持久存储，并不需要每个 pod 一个持久存储，并且多个 pod 对于同一个请求响应的结果是完全一致的。")]),e._v(" "),a("h3",{attrs:{id:"基于-replicaset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基于-replicaset"}},[e._v("#")]),e._v(" 基于 ReplicaSet")]),e._v(" "),a("p",[e._v("Deployment 是基于 ReplicaSet， DaemonSet 不是")]),e._v(" "),a("h3",{attrs:{id:"使用-selector"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用-selector"}},[e._v("#")]),e._v(" 使用 selector")]),e._v(" "),a("p",[e._v("二者都使用 selector")]),e._v(" "),a("h3",{attrs:{id:"业务场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#业务场景"}},[e._v("#")]),e._v(" 业务场景")]),e._v(" "),a("p",[a("strong",[e._v("Deployment")])]),e._v(" "),a("p",[e._v("通用型多副本无状态应用程序，副本保持、动态伸缩、自动重 新部署、版本回滚")]),e._v(" "),a("p",[a("strong",[e._v("DaemonSet")])]),e._v(" "),a("ul",[a("li",[e._v("在每个节点上运行集群存储 DaemonSet，例如 glusterd、ceph。")]),e._v(" "),a("li",[e._v("在每个节点上运行日志收集 DaemonSet，例如 fluentd、logstash。")]),e._v(" "),a("li",[e._v("在每个节点上运行监控 DaemonSet，例如 Prometheus Node Exporter、 zabbix agent 等。")])]),e._v(" "),a("h3",{attrs:{id:"自动触发更新部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自动触发更新部署"}},[e._v("#")]),e._v(" 自动触发更新部署")]),e._v(" "),a("p",[a("strong",[e._v("Deployment")])]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("kubectl apply -f\nkubectl replace -f\nkubectl edit deployments\nkubectl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("env")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("image"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("resource\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("## highlight")]),e._v("\nkubectl scale --replicas"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("N deployment\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br")])]),a("p",[a("strong",[e._v("DaemonSet")])]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("kubectl apply -f\nkubectl replace -f\nkubectl edit ds kubectl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("set")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("env")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("image"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v("resource\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br")])]),a("h3",{attrs:{id:"部署策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#部署策略"}},[e._v("#")]),e._v(" 部署策略")]),e._v(" "),a("p",[a("strong",[e._v("Deployment")])]),e._v(" "),a("p",[e._v("Recreate")]),e._v(" "),a("p",[e._v("RollingUpdate maxSurge maxUnavailable（默认值为 25%）")]),e._v(" "),a("p",[a("strong",[e._v("DaemonSet")])]),e._v(" "),a("p",[e._v("OnDelete")]),e._v(" "),a("p",[e._v("RollingUpdate maxUnavailable（默认值为 1）")]),e._v(" "),a("h3",{attrs:{id:"版本回滚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#版本回滚"}},[e._v("#")]),e._v(" 版本回滚")]),e._v(" "),a("p",[a("strong",[e._v("Deployment")])]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("kubectl rollout\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("p",[a("strong",[e._v("DaemonSet")])]),e._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("kubectl rollout\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);