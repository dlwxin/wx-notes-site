(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{615:function(e,t,o){"use strict";o.r(t);var s=o(18),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("p",[e._v("Refer to "),o("a",{attrs:{href:"https://stackoverflow.com/questions/1753070/how-do-i-configure-git-to-ignore-some-files-locally",target:"_blank",rel:"noopener noreferrer"}},[e._v("How do I configure git to ignore some files locally?"),o("OutboundLink")],1)]),e._v(" "),o("p",[e._v("Well, that easy youâ€™ll say. Just add the file to "),o("code",[e._v(".gitignore")]),e._v(".")]),e._v(" "),o("p",[e._v("Yes, that will solve the issue, but it would also create a potential issue for the customers, because it means their own copy of this file will never get checked into source control. Unless of course they remove the entry from the "),o("code",[e._v(".gitignore")]),e._v(" file.")]),e._v(" "),o("p",[e._v("Well it turns out there is another way.")]),e._v(" "),o("p",[e._v("In Git, you can exclude a file locally - i.e. only on the current computer.")]),e._v(" "),o("p",[e._v("Inside the "),o("code",[e._v(".git")]),e._v(" folder for your project, there is a file "),o("code",[e._v("/info/exclude")]),e._v(". This file has the exact same structure as a "),o("code",[e._v(".gitignore")]),e._v(" file, so you can add the file patterns for any files which must be excluded locally, inside that file.")]),e._v(" "),o("p",[e._v("From the "),o("a",{attrs:{href:"https://git-scm.com/docs/gitignore",target:"_blank",rel:"noopener noreferrer"}},[e._v("relevant Git documentation"),o("OutboundLink")],1),e._v(":")]),e._v(" "),o("blockquote",[o("p",[e._v("Patterns which are specific to a particular repository but which do not need to be shared with other related repositories (e.g., auxiliary files that live inside the repository but are specific to one user's workflow) should go into the "),o("code",[e._v("$GIT_DIR/info/exclude")]),e._v(" file.")])]),e._v(" "),o("div",{staticClass:"language- line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n# *.[oa]\n# *~\n\n# Maven\ntarget/\n")])]),e._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[e._v("1")]),o("br"),o("span",{staticClass:"line-number"},[e._v("2")]),o("br"),o("span",{staticClass:"line-number"},[e._v("3")]),o("br"),o("span",{staticClass:"line-number"},[e._v("4")]),o("br"),o("span",{staticClass:"line-number"},[e._v("5")]),o("br"),o("span",{staticClass:"line-number"},[e._v("6")]),o("br"),o("span",{staticClass:"line-number"},[e._v("7")]),o("br"),o("span",{staticClass:"line-number"},[e._v("8")]),o("br"),o("span",{staticClass:"line-number"},[e._v("9")]),o("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);